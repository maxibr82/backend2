<style>
  body {
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    background: #000;
    font-family: Arial, sans-serif;
  }
  .reset-container {
    width: 100vw;
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .reset-box {
    background: #181818;
    padding: 32px 28px 24px 28px;
    border-radius: 16px;
    box-shadow: 0 4px 32px 0 rgba(0,0,0,0.5);
    width: 450px;
    display: flex;
    flex-direction: column;
    align-items: center;
    animation: fadeInDown 1s;
    position: relative;
  }
  .volver-btn {
    display: block;
    position: absolute;
    left: 18px;
    top: 18px;
    background: #1da81d;
    color: #fff;
    text-decoration: none;
    font-weight: bold;
    font-size: 1em;
    border-radius: 7px;
    padding: 7px 18px;
    transition: background 0.2s, color 0.2s;
  }
  .volver-btn:hover {
    background: #ffa500;
    color: #181818;
  }
  .reset-box h2 {
    color: #ffa500;
    margin-bottom: 20px;
    font-weight: bold;
    text-align: center;
  }
  .reset-box p {
    color: #ccc;
    margin-bottom: 20px;
    text-align: center;
    line-height: 1.5;
  }
  #resetForm {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 14px;
  }
  #resetForm input {
    padding: 12px;
    border-radius: 7px;
    border: none;
    background: #222;
    color: #fff;
    font-size: 1em;
    transition: background 0.2s;
  }
  #resetForm input:focus {
    background: #333;
    outline: 2px solid #ffa500;
  }
  #reset-btn {
    background: #ffa500;
    color: #181818;
    font-weight: bold;
    border: none;
    border-radius: 7px;
    padding: 12px;
    margin-top: 10px;
    transition: background 0.2s;
    cursor: pointer;
  }
  #reset-btn:hover {
    background: #ffb733;
  }
  #reset-btn:disabled {
    background: #666;
    cursor: not-allowed;
  }
  #message {
    margin-top: 10px;
    text-align: center;
    font-weight: bold;
    min-height: 20px;
    font-size: 1.1em;
  }
  .success {
    color: #1da81d;
  }
  .error {
    color: #d51515;
  }
  .warning {
    color: #ffa500;
  }
  .reset-box a:not(.volver-btn) {
    color: #ffa500;
    margin-top: 18px;
    text-align: center;
    text-decoration: underline;
    font-size: 1em;
    display: block;
    transition: color 0.2s;
  }
  .reset-box a:not(.volver-btn):hover {
    color: #fff;
  }
  @keyframes fadeInDown {
    from { opacity: 0; transform: translateY(-40px);}
    to { opacity: 1; transform: translateY(0);}
  }
  .password-requirements {
    background: #333;
    border: 1px solid #555;
    border-radius: 8px;
    padding: 15px;
    margin-top: 20px;
    color: #ccc;
    font-size: 0.9em;
  }
  .password-requirements h4 {
    color: #ffa500;
    margin: 0 0 10px 0;
  }
  .password-requirements ul {
    margin: 10px 0;
    padding-left: 20px;
  }
  .password-requirements li {
    margin-bottom: 5px;
  }
  .requirement {
    display: flex;
    align-items: center;
    margin-bottom: 5px;
  }
  .requirement.valid {
    color: #1da81d;
  }
  .requirement.invalid {
    color: #d51515;
  }
  .requirement-icon {
    margin-right: 8px;
    font-weight: bold;
  }
  .loading {
    display: none;
    text-align: center;
    color: #ffa500;
  }
  .token-invalid {
    text-align: center;
    color: #d51515;
  }
  .token-invalid h3 {
    color: #d51515;
    margin-bottom: 15px;
  }
</style>

<div class="reset-container">
  <div class="reset-box">
    <a href="/login" class="volver-btn">Volver</a>
    
    <div id="loading" class="loading">
      <h2>üîç Verificando enlace...</h2>
      <p>Por favor espera mientras verificamos tu enlace de recuperaci√≥n.</p>
    </div>
    
    <div id="invalid-token" class="token-invalid" style="display: none;">
      <h3>‚ùå Enlace Inv√°lido</h3>
      <p>Este enlace de recuperaci√≥n no es v√°lido o ha expirado.</p>
      <p>Los enlaces de recuperaci√≥n expiran despu√©s de 1 hora.</p>
      <a href="/forgot-password">Solicitar nuevo enlace</a>
    </div>
    
    <div id="reset-form" style="display: none;">
      <h2>üîë Nueva Contrase√±a</h2>
      
      <p>Ingresa tu nueva contrase√±a. Aseg√∫rate de que sea segura y diferente a las anteriores.</p>
      
      <form id="resetForm">
          <input type="password" name="newPassword" id="newPassword" placeholder="Nueva contrase√±a" required>
          <input type="password" name="confirmPassword" id="confirmPassword" placeholder="Confirmar nueva contrase√±a" required>
          <button type="submit" id="reset-btn">Restablecer contrase√±a</button>
      </form>
      
      <div id="message"></div>
      
      <div class="password-requirements">
        <h4>üìã Requisitos de la contrase√±a:</h4>
        <div id="requirements">
          <div class="requirement" id="req-length">
            <span class="requirement-icon">‚≠ï</span>
            <span>Al menos 6 caracteres</span>
          </div>
          <div class="requirement" id="req-uppercase">
            <span class="requirement-icon">‚≠ï</span>
            <span>Una letra may√∫scula</span>
          </div>
          <div class="requirement" id="req-lowercase">
            <span class="requirement-icon">‚≠ï</span>
            <span>Una letra min√∫scula</span>
          </div>
          <div class="requirement" id="req-number">
            <span class="requirement-icon">‚≠ï</span>
            <span>Un n√∫mero</span>
          </div>
          <div class="requirement" id="req-special">
            <span class="requirement-icon">‚≠ï</span>
            <span>Un car√°cter especial (@$!%*?&)</span>
          </div>
          <div class="requirement" id="req-match">
            <span class="requirement-icon">‚≠ï</span>
            <span>Las contrase√±as deben coincidir</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
let resetToken = null;

// Obtener token de la URL
const urlParams = new URLSearchParams(window.location.search);
resetToken = urlParams.get('token');

// Verificar token al cargar la p√°gina
document.addEventListener('DOMContentLoaded', function() {
    verifyToken();
});

async function verifyToken() {
    if (!resetToken) {
        showInvalidToken();
        return;
    }
    
    try {
        const response = await fetch(`/api/password-reset/verify/${resetToken}`);
        const result = await response.json();
        
        if (result.status === 'success') {
            showResetForm();
        } else {
            showInvalidToken();
        }
        
    } catch (error) {
        console.error('Error verificando token:', error);
        showInvalidToken();
    }
}

function showInvalidToken() {
    document.getElementById('loading').style.display = 'none';
    document.getElementById('invalid-token').style.display = 'block';
}

function showResetForm() {
    document.getElementById('loading').style.display = 'none';
    document.getElementById('reset-form').style.display = 'block';
    
    // Agregar listeners para validaci√≥n en tiempo real
    const newPassword = document.getElementById('newPassword');
    const confirmPassword = document.getElementById('confirmPassword');
    
    newPassword.addEventListener('input', validatePassword);
    confirmPassword.addEventListener('input', validatePassword);
}

function validatePassword() {
    const newPassword = document.getElementById('newPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    
    // Validar longitud
    updateRequirement('req-length', newPassword.length >= 6);
    
    // Validar may√∫scula
    updateRequirement('req-uppercase', /[A-Z]/.test(newPassword));
    
    // Validar min√∫scula
    updateRequirement('req-lowercase', /[a-z]/.test(newPassword));
    
    // Validar n√∫mero
    updateRequirement('req-number', /\d/.test(newPassword));
    
    // Validar car√°cter especial
    updateRequirement('req-special', /[@$!%*?&]/.test(newPassword));
    
    // Validar coincidencia
    updateRequirement('req-match', newPassword === confirmPassword && newPassword.length > 0);
}

function updateRequirement(elementId, isValid) {
    const element = document.getElementById(elementId);
    const icon = element.querySelector('.requirement-icon');
    
    if (isValid) {
        element.classList.remove('invalid');
        element.classList.add('valid');
        icon.textContent = '‚úÖ';
    } else {
        element.classList.remove('valid');
        element.classList.add('invalid');
        icon.textContent = '‚ùå';
    }
}

document.getElementById('resetForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const form = e.target;
    const submitBtn = document.getElementById('reset-btn');
    const messageDiv = document.getElementById('message');
    
    const newPassword = form.newPassword.value;
    const confirmPassword = form.confirmPassword.value;
    
    // Validaciones client-side
    if (newPassword.length < 6) {
        showMessage('La contrase√±a debe tener al menos 6 caracteres', 'error');
        return;
    }
    
    if (newPassword !== confirmPassword) {
        showMessage('Las contrase√±as no coinciden', 'error');
        return;
    }
    
    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])/;
    if (!passwordRegex.test(newPassword)) {
        showMessage('La contrase√±a no cumple con todos los requisitos', 'error');
        return;
    }
    
    // Deshabilitar bot√≥n durante la petici√≥n
    submitBtn.disabled = true;
    submitBtn.textContent = 'Restableciendo...';
    
    try {
        const response = await fetch('/api/password-reset/reset', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                token: resetToken,
                newPassword: newPassword,
                confirmPassword: confirmPassword
            })
        });
        
        const result = await response.json();
        
        if (result.status === 'success') {
            showMessage('‚úÖ Contrase√±a restablecida exitosamente', 'success');
            form.reset();
            
            // Redirigir al login despu√©s de 3 segundos
            setTimeout(() => {
                window.location.href = '/login';
            }, 3000);
            
        } else {
            showMessage(result.message || 'Error al restablecer la contrase√±a', 'error');
        }
        
    } catch (error) {
        console.error('Error:', error);
        showMessage('Error de conexi√≥n. Int√©ntalo de nuevo.', 'error');
    } finally {
        // Rehabilitar bot√≥n
        submitBtn.disabled = false;
        submitBtn.textContent = 'Restablecer contrase√±a';
    }
});

function showMessage(text, type) {
    const messageDiv = document.getElementById('message');
    messageDiv.textContent = text;
    messageDiv.className = type;
    messageDiv.style.display = 'block';
    
    // Auto-hide despu√©s de unos segundos
    setTimeout(() => {
        if (type !== 'success') {
            messageDiv.style.display = 'none';
        }
    }, 8000);
}
</script>
